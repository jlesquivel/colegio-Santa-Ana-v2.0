'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet2
    Inherits DataSet
    
    Private tableestudiantes As estudiantesDataTable
    
    Private tablematricula As matriculaDataTable
    
    Private tableniveles As nivelesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("estudiantes")) Is Nothing) Then
                Me.Tables.Add(New estudiantesDataTable(ds.Tables("estudiantes")))
            End If
            If (Not (ds.Tables("matricula")) Is Nothing) Then
                Me.Tables.Add(New matriculaDataTable(ds.Tables("matricula")))
            End If
            If (Not (ds.Tables("niveles")) Is Nothing) Then
                Me.Tables.Add(New nivelesDataTable(ds.Tables("niveles")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property estudiantes As estudiantesDataTable
        Get
            Return Me.tableestudiantes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property matricula As matriculaDataTable
        Get
            Return Me.tablematricula
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property niveles As nivelesDataTable
        Get
            Return Me.tableniveles
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("estudiantes")) Is Nothing) Then
            Me.Tables.Add(New estudiantesDataTable(ds.Tables("estudiantes")))
        End If
        If (Not (ds.Tables("matricula")) Is Nothing) Then
            Me.Tables.Add(New matriculaDataTable(ds.Tables("matricula")))
        End If
        If (Not (ds.Tables("niveles")) Is Nothing) Then
            Me.Tables.Add(New nivelesDataTable(ds.Tables("niveles")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableestudiantes = CType(Me.Tables("estudiantes"),estudiantesDataTable)
        If (Not (Me.tableestudiantes) Is Nothing) Then
            Me.tableestudiantes.InitVars
        End If
        Me.tablematricula = CType(Me.Tables("matricula"),matriculaDataTable)
        If (Not (Me.tablematricula) Is Nothing) Then
            Me.tablematricula.InitVars
        End If
        Me.tableniveles = CType(Me.Tables("niveles"),nivelesDataTable)
        If (Not (Me.tableniveles) Is Nothing) Then
            Me.tableniveles.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableestudiantes = New estudiantesDataTable
        Me.Tables.Add(Me.tableestudiantes)
        Me.tablematricula = New matriculaDataTable
        Me.Tables.Add(Me.tablematricula)
        Me.tableniveles = New nivelesDataTable
        Me.Tables.Add(Me.tableniveles)
    End Sub
    
    Private Function ShouldSerializeestudiantes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializematricula() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeniveles() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub estudiantesRowChangeEventHandler(ByVal sender As Object, ByVal e As estudiantesRowChangeEvent)
    
    Public Delegate Sub matriculaRowChangeEventHandler(ByVal sender As Object, ByVal e As matriculaRowChangeEvent)
    
    Public Delegate Sub nivelesRowChangeEventHandler(ByVal sender As Object, ByVal e As nivelesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class estudiantesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncarnet As DataColumn
        
        Private columnnombre As DataColumn
        
        Private columnapellido1 As DataColumn
        
        Private columnapellido2 As DataColumn
        
        Private columnencargado1 As DataColumn
        
        Private columnrelacion As DataColumn
        
        Private columndireccion As DataColumn
        
        Private columntelefono As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnencargado2 As DataColumn
        
        Private columnrelacion2 As DataColumn
        
        Private columndireccion2 As DataColumn
        
        Private columntelefono2 As DataColumn
        
        Private columnemail2 As DataColumn
        
        Private columnestado As DataColumn
        
        Private columntrabajo2 As DataColumn
        
        Private columnfamilia As DataColumn
        
        Private columnnacimiento As DataColumn
        
        Private columncedula As DataColumn
        
        Private columntrabajo As DataColumn
        
        Friend Sub New()
            MyBase.New("estudiantes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property carnetColumn As DataColumn
            Get
                Return Me.columncarnet
            End Get
        End Property
        
        Friend ReadOnly Property nombreColumn As DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        Friend ReadOnly Property apellido1Column As DataColumn
            Get
                Return Me.columnapellido1
            End Get
        End Property
        
        Friend ReadOnly Property apellido2Column As DataColumn
            Get
                Return Me.columnapellido2
            End Get
        End Property
        
        Friend ReadOnly Property encargado1Column As DataColumn
            Get
                Return Me.columnencargado1
            End Get
        End Property
        
        Friend ReadOnly Property relacionColumn As DataColumn
            Get
                Return Me.columnrelacion
            End Get
        End Property
        
        Friend ReadOnly Property direccionColumn As DataColumn
            Get
                Return Me.columndireccion
            End Get
        End Property
        
        Friend ReadOnly Property telefonoColumn As DataColumn
            Get
                Return Me.columntelefono
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property encargado2Column As DataColumn
            Get
                Return Me.columnencargado2
            End Get
        End Property
        
        Friend ReadOnly Property relacion2Column As DataColumn
            Get
                Return Me.columnrelacion2
            End Get
        End Property
        
        Friend ReadOnly Property direccion2Column As DataColumn
            Get
                Return Me.columndireccion2
            End Get
        End Property
        
        Friend ReadOnly Property telefono2Column As DataColumn
            Get
                Return Me.columntelefono2
            End Get
        End Property
        
        Friend ReadOnly Property email2Column As DataColumn
            Get
                Return Me.columnemail2
            End Get
        End Property
        
        Friend ReadOnly Property estadoColumn As DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        Friend ReadOnly Property trabajo2Column As DataColumn
            Get
                Return Me.columntrabajo2
            End Get
        End Property
        
        Friend ReadOnly Property familiaColumn As DataColumn
            Get
                Return Me.columnfamilia
            End Get
        End Property
        
        Friend ReadOnly Property nacimientoColumn As DataColumn
            Get
                Return Me.columnnacimiento
            End Get
        End Property
        
        Friend ReadOnly Property cedulaColumn As DataColumn
            Get
                Return Me.columncedula
            End Get
        End Property
        
        Friend ReadOnly Property trabajoColumn As DataColumn
            Get
                Return Me.columntrabajo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As estudiantesRow
            Get
                Return CType(Me.Rows(index),estudiantesRow)
            End Get
        End Property
        
        Public Event estudiantesRowChanged As estudiantesRowChangeEventHandler
        
        Public Event estudiantesRowChanging As estudiantesRowChangeEventHandler
        
        Public Event estudiantesRowDeleted As estudiantesRowChangeEventHandler
        
        Public Event estudiantesRowDeleting As estudiantesRowChangeEventHandler
        
        Public Overloads Sub AddestudiantesRow(ByVal row As estudiantesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddestudiantesRow( _
                    ByVal carnet As String,  _
                    ByVal nombre As String,  _
                    ByVal apellido1 As String,  _
                    ByVal apellido2 As String,  _
                    ByVal encargado1 As String,  _
                    ByVal relacion As String,  _
                    ByVal direccion As String,  _
                    ByVal telefono As String,  _
                    ByVal email As String,  _
                    ByVal encargado2 As String,  _
                    ByVal relacion2 As String,  _
                    ByVal direccion2 As String,  _
                    ByVal telefono2 As String,  _
                    ByVal email2 As String,  _
                    ByVal estado As String,  _
                    ByVal trabajo2 As String,  _
                    ByVal familia As String,  _
                    ByVal nacimiento As Date,  _
                    ByVal cedula As String,  _
                    ByVal trabajo As String) As estudiantesRow
            Dim rowestudiantesRow As estudiantesRow = CType(Me.NewRow,estudiantesRow)
            rowestudiantesRow.ItemArray = New Object() {carnet, nombre, apellido1, apellido2, encargado1, relacion, direccion, telefono, email, encargado2, relacion2, direccion2, telefono2, email2, estado, trabajo2, familia, nacimiento, cedula, trabajo}
            Me.Rows.Add(rowestudiantesRow)
            Return rowestudiantesRow
        End Function
        
        Public Function FindBycarnet(ByVal carnet As String) As estudiantesRow
            Return CType(Me.Rows.Find(New Object() {carnet}),estudiantesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As estudiantesDataTable = CType(MyBase.Clone,estudiantesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New estudiantesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncarnet = Me.Columns("carnet")
            Me.columnnombre = Me.Columns("nombre")
            Me.columnapellido1 = Me.Columns("apellido1")
            Me.columnapellido2 = Me.Columns("apellido2")
            Me.columnencargado1 = Me.Columns("encargado1")
            Me.columnrelacion = Me.Columns("relacion")
            Me.columndireccion = Me.Columns("direccion")
            Me.columntelefono = Me.Columns("telefono")
            Me.columnemail = Me.Columns("email")
            Me.columnencargado2 = Me.Columns("encargado2")
            Me.columnrelacion2 = Me.Columns("relacion2")
            Me.columndireccion2 = Me.Columns("direccion2")
            Me.columntelefono2 = Me.Columns("telefono2")
            Me.columnemail2 = Me.Columns("email2")
            Me.columnestado = Me.Columns("estado")
            Me.columntrabajo2 = Me.Columns("trabajo2")
            Me.columnfamilia = Me.Columns("familia")
            Me.columnnacimiento = Me.Columns("nacimiento")
            Me.columncedula = Me.Columns("cedula")
            Me.columntrabajo = Me.Columns("trabajo")
        End Sub
        
        Private Sub InitClass()
            Me.columncarnet = New DataColumn("carnet", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncarnet)
            Me.columnnombre = New DataColumn("nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnombre)
            Me.columnapellido1 = New DataColumn("apellido1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellido1)
            Me.columnapellido2 = New DataColumn("apellido2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellido2)
            Me.columnencargado1 = New DataColumn("encargado1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnencargado1)
            Me.columnrelacion = New DataColumn("relacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrelacion)
            Me.columndireccion = New DataColumn("direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndireccion)
            Me.columntelefono = New DataColumn("telefono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntelefono)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnencargado2 = New DataColumn("encargado2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnencargado2)
            Me.columnrelacion2 = New DataColumn("relacion2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrelacion2)
            Me.columndireccion2 = New DataColumn("direccion2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndireccion2)
            Me.columntelefono2 = New DataColumn("telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntelefono2)
            Me.columnemail2 = New DataColumn("email2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail2)
            Me.columnestado = New DataColumn("estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnestado)
            Me.columntrabajo2 = New DataColumn("trabajo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntrabajo2)
            Me.columnfamilia = New DataColumn("familia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfamilia)
            Me.columnnacimiento = New DataColumn("nacimiento", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnacimiento)
            Me.columncedula = New DataColumn("cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncedula)
            Me.columntrabajo = New DataColumn("trabajo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntrabajo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncarnet}, true))
            Me.columncarnet.AllowDBNull = false
            Me.columncarnet.Unique = true
        End Sub
        
        Public Function NewestudiantesRow() As estudiantesRow
            Return CType(Me.NewRow,estudiantesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New estudiantesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(estudiantesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.estudiantesRowChangedEvent) Is Nothing) Then
                RaiseEvent estudiantesRowChanged(Me, New estudiantesRowChangeEvent(CType(e.Row,estudiantesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.estudiantesRowChangingEvent) Is Nothing) Then
                RaiseEvent estudiantesRowChanging(Me, New estudiantesRowChangeEvent(CType(e.Row,estudiantesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.estudiantesRowDeletedEvent) Is Nothing) Then
                RaiseEvent estudiantesRowDeleted(Me, New estudiantesRowChangeEvent(CType(e.Row,estudiantesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.estudiantesRowDeletingEvent) Is Nothing) Then
                RaiseEvent estudiantesRowDeleting(Me, New estudiantesRowChangeEvent(CType(e.Row,estudiantesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveestudiantesRow(ByVal row As estudiantesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class estudiantesRow
        Inherits DataRow
        
        Private tableestudiantes As estudiantesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableestudiantes = CType(Me.Table,estudiantesDataTable)
        End Sub
        
        Public Property carnet As String
            Get
                Return CType(Me(Me.tableestudiantes.carnetColumn),String)
            End Get
            Set
                Me(Me.tableestudiantes.carnetColumn) = value
            End Set
        End Property
        
        Public Property nombre As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.nombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.nombreColumn) = value
            End Set
        End Property
        
        Public Property apellido1 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.apellido1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.apellido1Column) = value
            End Set
        End Property
        
        Public Property apellido2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.apellido2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.apellido2Column) = value
            End Set
        End Property
        
        Public Property encargado1 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.encargado1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.encargado1Column) = value
            End Set
        End Property
        
        Public Property relacion As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.relacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.relacionColumn) = value
            End Set
        End Property
        
        Public Property direccion As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.direccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.direccionColumn) = value
            End Set
        End Property
        
        Public Property telefono As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.telefonoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.telefonoColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.emailColumn) = value
            End Set
        End Property
        
        Public Property encargado2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.encargado2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.encargado2Column) = value
            End Set
        End Property
        
        Public Property relacion2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.relacion2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.relacion2Column) = value
            End Set
        End Property
        
        Public Property direccion2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.direccion2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.direccion2Column) = value
            End Set
        End Property
        
        Public Property telefono2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.telefono2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.telefono2Column) = value
            End Set
        End Property
        
        Public Property email2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.email2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.email2Column) = value
            End Set
        End Property
        
        Public Property estado As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.estadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.estadoColumn) = value
            End Set
        End Property
        
        Public Property trabajo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.trabajo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.trabajo2Column) = value
            End Set
        End Property
        
        Public Property familia As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.familiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.familiaColumn) = value
            End Set
        End Property
        
        Public Property nacimiento As Date
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.nacimientoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.nacimientoColumn) = value
            End Set
        End Property
        
        Public Property cedula As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.cedulaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.cedulaColumn) = value
            End Set
        End Property
        
        Public Property trabajo As String
            Get
                Try 
                    Return CType(Me(Me.tableestudiantes.trabajoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableestudiantes.trabajoColumn) = value
            End Set
        End Property
        
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.nombreColumn)
        End Function
        
        Public Sub SetnombreNull()
            Me(Me.tableestudiantes.nombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isapellido1Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.apellido1Column)
        End Function
        
        Public Sub Setapellido1Null()
            Me(Me.tableestudiantes.apellido1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isapellido2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.apellido2Column)
        End Function
        
        Public Sub Setapellido2Null()
            Me(Me.tableestudiantes.apellido2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isencargado1Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.encargado1Column)
        End Function
        
        Public Sub Setencargado1Null()
            Me(Me.tableestudiantes.encargado1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsrelacionNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.relacionColumn)
        End Function
        
        Public Sub SetrelacionNull()
            Me(Me.tableestudiantes.relacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdireccionNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.direccionColumn)
        End Function
        
        Public Sub SetdireccionNull()
            Me(Me.tableestudiantes.direccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstelefonoNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.telefonoColumn)
        End Function
        
        Public Sub SettelefonoNull()
            Me(Me.tableestudiantes.telefonoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableestudiantes.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isencargado2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.encargado2Column)
        End Function
        
        Public Sub Setencargado2Null()
            Me(Me.tableestudiantes.encargado2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrelacion2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.relacion2Column)
        End Function
        
        Public Sub Setrelacion2Null()
            Me(Me.tableestudiantes.relacion2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdireccion2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.direccion2Column)
        End Function
        
        Public Sub Setdireccion2Null()
            Me(Me.tableestudiantes.direccion2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Istelefono2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.telefono2Column)
        End Function
        
        Public Sub Settelefono2Null()
            Me(Me.tableestudiantes.telefono2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isemail2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.email2Column)
        End Function
        
        Public Sub Setemail2Null()
            Me(Me.tableestudiantes.email2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.estadoColumn)
        End Function
        
        Public Sub SetestadoNull()
            Me(Me.tableestudiantes.estadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istrabajo2Null() As Boolean
            Return Me.IsNull(Me.tableestudiantes.trabajo2Column)
        End Function
        
        Public Sub Settrabajo2Null()
            Me(Me.tableestudiantes.trabajo2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsfamiliaNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.familiaColumn)
        End Function
        
        Public Sub SetfamiliaNull()
            Me(Me.tableestudiantes.familiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnacimientoNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.nacimientoColumn)
        End Function
        
        Public Sub SetnacimientoNull()
            Me(Me.tableestudiantes.nacimientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscedulaNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.cedulaColumn)
        End Function
        
        Public Sub SetcedulaNull()
            Me(Me.tableestudiantes.cedulaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstrabajoNull() As Boolean
            Return Me.IsNull(Me.tableestudiantes.trabajoColumn)
        End Function
        
        Public Sub SettrabajoNull()
            Me(Me.tableestudiantes.trabajoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class estudiantesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As estudiantesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As estudiantesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As estudiantesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class matriculaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncarnet As DataColumn
        
        Private columnano As DataColumn
        
        Private columnencargado As DataColumn
        
        Private columnnivel As DataColumn
        
        Private columngrupo As DataColumn
        
        Private columnmonto As DataColumn
        
        Private columnfecha As DataColumn
        
        Private columnpoliza As DataColumn
        
        Private columnbeca As DataColumn
        
        Private columnid_mat As DataColumn
        
        Private columnrecibo As DataColumn
        
        Private columnbingo As DataColumn
        
        Friend Sub New()
            MyBase.New("matricula")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property carnetColumn As DataColumn
            Get
                Return Me.columncarnet
            End Get
        End Property
        
        Friend ReadOnly Property anoColumn As DataColumn
            Get
                Return Me.columnano
            End Get
        End Property
        
        Friend ReadOnly Property encargadoColumn As DataColumn
            Get
                Return Me.columnencargado
            End Get
        End Property
        
        Friend ReadOnly Property nivelColumn As DataColumn
            Get
                Return Me.columnnivel
            End Get
        End Property
        
        Friend ReadOnly Property grupoColumn As DataColumn
            Get
                Return Me.columngrupo
            End Get
        End Property
        
        Friend ReadOnly Property montoColumn As DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        Friend ReadOnly Property fechaColumn As DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        Friend ReadOnly Property polizaColumn As DataColumn
            Get
                Return Me.columnpoliza
            End Get
        End Property
        
        Friend ReadOnly Property becaColumn As DataColumn
            Get
                Return Me.columnbeca
            End Get
        End Property
        
        Friend ReadOnly Property id_matColumn As DataColumn
            Get
                Return Me.columnid_mat
            End Get
        End Property
        
        Friend ReadOnly Property reciboColumn As DataColumn
            Get
                Return Me.columnrecibo
            End Get
        End Property
        
        Friend ReadOnly Property bingoColumn As DataColumn
            Get
                Return Me.columnbingo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As matriculaRow
            Get
                Return CType(Me.Rows(index),matriculaRow)
            End Get
        End Property
        
        Public Event matriculaRowChanged As matriculaRowChangeEventHandler
        
        Public Event matriculaRowChanging As matriculaRowChangeEventHandler
        
        Public Event matriculaRowDeleted As matriculaRowChangeEventHandler
        
        Public Event matriculaRowDeleting As matriculaRowChangeEventHandler
        
        Public Overloads Sub AddmatriculaRow(ByVal row As matriculaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmatriculaRow(ByVal carnet As String, ByVal ano As String, ByVal encargado As String, ByVal nivel As String, ByVal grupo As String, ByVal monto As Decimal, ByVal fecha As Date, ByVal poliza As Decimal, ByVal beca As Decimal, ByVal recibo As String, ByVal bingo As Decimal) As matriculaRow
            Dim rowmatriculaRow As matriculaRow = CType(Me.NewRow,matriculaRow)
            rowmatriculaRow.ItemArray = New Object() {carnet, ano, encargado, nivel, grupo, monto, fecha, poliza, beca, Nothing, recibo, bingo}
            Me.Rows.Add(rowmatriculaRow)
            Return rowmatriculaRow
        End Function
        
        Public Function FindByid_mat(ByVal id_mat As Decimal) As matriculaRow
            Return CType(Me.Rows.Find(New Object() {id_mat}),matriculaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As matriculaDataTable = CType(MyBase.Clone,matriculaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New matriculaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncarnet = Me.Columns("carnet")
            Me.columnano = Me.Columns("ano")
            Me.columnencargado = Me.Columns("encargado")
            Me.columnnivel = Me.Columns("nivel")
            Me.columngrupo = Me.Columns("grupo")
            Me.columnmonto = Me.Columns("monto")
            Me.columnfecha = Me.Columns("fecha")
            Me.columnpoliza = Me.Columns("poliza")
            Me.columnbeca = Me.Columns("beca")
            Me.columnid_mat = Me.Columns("id_mat")
            Me.columnrecibo = Me.Columns("recibo")
            Me.columnbingo = Me.Columns("bingo")
        End Sub
        
        Private Sub InitClass()
            Me.columncarnet = New DataColumn("carnet", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncarnet)
            Me.columnano = New DataColumn("ano", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnano)
            Me.columnencargado = New DataColumn("encargado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnencargado)
            Me.columnnivel = New DataColumn("nivel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnivel)
            Me.columngrupo = New DataColumn("grupo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngrupo)
            Me.columnmonto = New DataColumn("monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmonto)
            Me.columnfecha = New DataColumn("fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha)
            Me.columnpoliza = New DataColumn("poliza", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpoliza)
            Me.columnbeca = New DataColumn("beca", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbeca)
            Me.columnid_mat = New DataColumn("id_mat", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_mat)
            Me.columnrecibo = New DataColumn("recibo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrecibo)
            Me.columnbingo = New DataColumn("bingo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbingo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_mat}, true))
            Me.columnid_mat.AutoIncrement = true
            Me.columnid_mat.AllowDBNull = false
            Me.columnid_mat.ReadOnly = true
            Me.columnid_mat.Unique = true
        End Sub
        
        Public Function NewmatriculaRow() As matriculaRow
            Return CType(Me.NewRow,matriculaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New matriculaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(matriculaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.matriculaRowChangedEvent) Is Nothing) Then
                RaiseEvent matriculaRowChanged(Me, New matriculaRowChangeEvent(CType(e.Row,matriculaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.matriculaRowChangingEvent) Is Nothing) Then
                RaiseEvent matriculaRowChanging(Me, New matriculaRowChangeEvent(CType(e.Row,matriculaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.matriculaRowDeletedEvent) Is Nothing) Then
                RaiseEvent matriculaRowDeleted(Me, New matriculaRowChangeEvent(CType(e.Row,matriculaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.matriculaRowDeletingEvent) Is Nothing) Then
                RaiseEvent matriculaRowDeleting(Me, New matriculaRowChangeEvent(CType(e.Row,matriculaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovematriculaRow(ByVal row As matriculaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class matriculaRow
        Inherits DataRow
        
        Private tablematricula As matriculaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablematricula = CType(Me.Table,matriculaDataTable)
        End Sub
        
        Public Property carnet As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.carnetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.carnetColumn) = value
            End Set
        End Property
        
        Public Property ano As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.anoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.anoColumn) = value
            End Set
        End Property
        
        Public Property encargado As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.encargadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.encargadoColumn) = value
            End Set
        End Property
        
        Public Property nivel As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.nivelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.nivelColumn) = value
            End Set
        End Property
        
        Public Property grupo As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.grupoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.grupoColumn) = value
            End Set
        End Property
        
        Public Property monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablematricula.montoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.montoColumn) = value
            End Set
        End Property
        
        Public Property fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tablematricula.fechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.fechaColumn) = value
            End Set
        End Property
        
        Public Property poliza As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablematricula.polizaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.polizaColumn) = value
            End Set
        End Property
        
        Public Property beca As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablematricula.becaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.becaColumn) = value
            End Set
        End Property
        
        Public Property id_mat As Decimal
            Get
                Return CType(Me(Me.tablematricula.id_matColumn),Decimal)
            End Get
            Set
                Me(Me.tablematricula.id_matColumn) = value
            End Set
        End Property
        
        Public Property recibo As String
            Get
                Try 
                    Return CType(Me(Me.tablematricula.reciboColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.reciboColumn) = value
            End Set
        End Property
        
        Public Property bingo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablematricula.bingoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablematricula.bingoColumn) = value
            End Set
        End Property
        
        Public Function IscarnetNull() As Boolean
            Return Me.IsNull(Me.tablematricula.carnetColumn)
        End Function
        
        Public Sub SetcarnetNull()
            Me(Me.tablematricula.carnetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsanoNull() As Boolean
            Return Me.IsNull(Me.tablematricula.anoColumn)
        End Function
        
        Public Sub SetanoNull()
            Me(Me.tablematricula.anoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsencargadoNull() As Boolean
            Return Me.IsNull(Me.tablematricula.encargadoColumn)
        End Function
        
        Public Sub SetencargadoNull()
            Me(Me.tablematricula.encargadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnivelNull() As Boolean
            Return Me.IsNull(Me.tablematricula.nivelColumn)
        End Function
        
        Public Sub SetnivelNull()
            Me(Me.tablematricula.nivelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgrupoNull() As Boolean
            Return Me.IsNull(Me.tablematricula.grupoColumn)
        End Function
        
        Public Sub SetgrupoNull()
            Me(Me.tablematricula.grupoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tablematricula.montoColumn)
        End Function
        
        Public Sub SetmontoNull()
            Me(Me.tablematricula.montoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablematricula.fechaColumn)
        End Function
        
        Public Sub SetfechaNull()
            Me(Me.tablematricula.fechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspolizaNull() As Boolean
            Return Me.IsNull(Me.tablematricula.polizaColumn)
        End Function
        
        Public Sub SetpolizaNull()
            Me(Me.tablematricula.polizaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbecaNull() As Boolean
            Return Me.IsNull(Me.tablematricula.becaColumn)
        End Function
        
        Public Sub SetbecaNull()
            Me(Me.tablematricula.becaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreciboNull() As Boolean
            Return Me.IsNull(Me.tablematricula.reciboColumn)
        End Function
        
        Public Sub SetreciboNull()
            Me(Me.tablematricula.reciboColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbingoNull() As Boolean
            Return Me.IsNull(Me.tablematricula.bingoColumn)
        End Function
        
        Public Sub SetbingoNull()
            Me(Me.tablematricula.bingoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class matriculaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As matriculaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As matriculaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As matriculaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class nivelesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnivel As DataColumn
        
        Private columnciclo As DataColumn
        
        Private columncobros As DataColumn
        
        Private columndescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("niveles")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nivelColumn As DataColumn
            Get
                Return Me.columnnivel
            End Get
        End Property
        
        Friend ReadOnly Property cicloColumn As DataColumn
            Get
                Return Me.columnciclo
            End Get
        End Property
        
        Friend ReadOnly Property cobrosColumn As DataColumn
            Get
                Return Me.columncobros
            End Get
        End Property
        
        Friend ReadOnly Property descripcionColumn As DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As nivelesRow
            Get
                Return CType(Me.Rows(index),nivelesRow)
            End Get
        End Property
        
        Public Event nivelesRowChanged As nivelesRowChangeEventHandler
        
        Public Event nivelesRowChanging As nivelesRowChangeEventHandler
        
        Public Event nivelesRowDeleted As nivelesRowChangeEventHandler
        
        Public Event nivelesRowDeleting As nivelesRowChangeEventHandler
        
        Public Overloads Sub AddnivelesRow(ByVal row As nivelesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddnivelesRow(ByVal nivel As String, ByVal ciclo As String, ByVal cobros As Decimal, ByVal descripcion As String) As nivelesRow
            Dim rownivelesRow As nivelesRow = CType(Me.NewRow,nivelesRow)
            rownivelesRow.ItemArray = New Object() {nivel, ciclo, cobros, descripcion}
            Me.Rows.Add(rownivelesRow)
            Return rownivelesRow
        End Function
        
        Public Function FindBynivel(ByVal nivel As String) As nivelesRow
            Return CType(Me.Rows.Find(New Object() {nivel}),nivelesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As nivelesDataTable = CType(MyBase.Clone,nivelesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New nivelesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnnivel = Me.Columns("nivel")
            Me.columnciclo = Me.Columns("ciclo")
            Me.columncobros = Me.Columns("cobros")
            Me.columndescripcion = Me.Columns("descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnnivel = New DataColumn("nivel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnivel)
            Me.columnciclo = New DataColumn("ciclo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnciclo)
            Me.columncobros = New DataColumn("cobros", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncobros)
            Me.columndescripcion = New DataColumn("descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnnivel}, true))
            Me.columnnivel.AllowDBNull = false
            Me.columnnivel.Unique = true
        End Sub
        
        Public Function NewnivelesRow() As nivelesRow
            Return CType(Me.NewRow,nivelesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New nivelesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(nivelesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.nivelesRowChangedEvent) Is Nothing) Then
                RaiseEvent nivelesRowChanged(Me, New nivelesRowChangeEvent(CType(e.Row,nivelesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.nivelesRowChangingEvent) Is Nothing) Then
                RaiseEvent nivelesRowChanging(Me, New nivelesRowChangeEvent(CType(e.Row,nivelesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.nivelesRowDeletedEvent) Is Nothing) Then
                RaiseEvent nivelesRowDeleted(Me, New nivelesRowChangeEvent(CType(e.Row,nivelesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.nivelesRowDeletingEvent) Is Nothing) Then
                RaiseEvent nivelesRowDeleting(Me, New nivelesRowChangeEvent(CType(e.Row,nivelesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovenivelesRow(ByVal row As nivelesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class nivelesRow
        Inherits DataRow
        
        Private tableniveles As nivelesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableniveles = CType(Me.Table,nivelesDataTable)
        End Sub
        
        Public Property nivel As String
            Get
                Return CType(Me(Me.tableniveles.nivelColumn),String)
            End Get
            Set
                Me(Me.tableniveles.nivelColumn) = value
            End Set
        End Property
        
        Public Property ciclo As String
            Get
                Try 
                    Return CType(Me(Me.tableniveles.cicloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableniveles.cicloColumn) = value
            End Set
        End Property
        
        Public Property cobros As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableniveles.cobrosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableniveles.cobrosColumn) = value
            End Set
        End Property
        
        Public Property descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableniveles.descripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableniveles.descripcionColumn) = value
            End Set
        End Property
        
        Public Function IscicloNull() As Boolean
            Return Me.IsNull(Me.tableniveles.cicloColumn)
        End Function
        
        Public Sub SetcicloNull()
            Me(Me.tableniveles.cicloColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscobrosNull() As Boolean
            Return Me.IsNull(Me.tableniveles.cobrosColumn)
        End Function
        
        Public Sub SetcobrosNull()
            Me(Me.tableniveles.cobrosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tableniveles.descripcionColumn)
        End Function
        
        Public Sub SetdescripcionNull()
            Me(Me.tableniveles.descripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class nivelesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As nivelesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As nivelesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As nivelesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
